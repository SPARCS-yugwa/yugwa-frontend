{"ast":null,"code":"// api.js\nimport { createRequest } from \"../utils/api-utils\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"./APIconfig\";\n\n// const BASE_URL = \"http://ddubam.site:8080/api\";\n\nconst APP_KEY = process.env.REACT_APP_APP_KEY;\n\n//카카오 계정정보에서 id추출해 뚜밤뚜밤 계정정보 요청\nexport const fetchUserData = async userId => {\n  return createRequest(\"get\", `/members/${userId}`);\n};\n\n//완료한 산책 리스트 조회\nexport const fetchFinishedPaths = async userId => {\n  return createRequest(\"get\", `/members/walks/complete/${userId}`);\n};\n\n//찜한 산책로 리스트 조회\nexport const fetchLikedPaths = async userId => {\n  return createRequest(\"get\", `/members/walks/select/${userId}`);\n};\n\n//주변 산책로 리스트 조회\nexport const fetchNearbyPaths = async (lat, lng) => {\n  return createRequest(\"get\", `/walks/near/${lat}/${lng}`);\n};\n\n//키워드로 장소 검색 -> 목적지 위도, 경도 얻음\nexport const keywordSearch = async keyword => {\n  try {\n    const response = await axios.get(`https://dapi.kakao.com/v2/local/search/keyword.json`, {\n      params: {\n        query: keyword\n      },\n      headers: {\n        Authorization: `KakaoAK ${APP_KEY}`\n      }\n    });\n    return response.data.documents;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//좌표로 주소 변환하기\nexport const coord2address = async (startY, startX) => {\n  try {\n    const response = await axios.get(`https://dapi.kakao.com/v2/local/geo/coord2address.json`, {\n      params: {\n        x: startX,\n        y: startY\n      },\n      headers: {\n        Authorization: `KakaoAK ${APP_KEY}`\n      }\n    });\n    // console.log(response.data.documents[0].address.address_name);\n    return response.data.documents[0].address.address_name;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//인기 산책로 리스트 조회\nexport const fetchPopularPaths = async () => {\n  return createRequest(\"get\", `/walks/popular`);\n};\nconst shuffleArray = array => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\n//관광지 리스트 조회\nexport const fetchAttractions = async () => {\n  try {\n    const response = await createRequest(\"get\", `/attractions`);\n    const shuffledData = shuffleArray(response);\n    const randomFive = shuffledData.slice(0, 5);\n    return randomFive;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n//산책로 상세정보 조회\nexport const fetchPathDetail = async (trailId, userId) => {\n  return createRequest(\"get\", `/walks/${trailId}/${userId}`);\n};\nexport const logoutRequest = async () => {\n  return createRequest(\"get\", `/members/kakao/logout`);\n};\n\n//인기 산책로로 가는 길 + 디테일\nexport const navigateToPopular = async (trailId, userId, latitude, longitude) => {\n  return createRequest(\"get\", `/walks/popular/route/${trailId}/${userId}/${latitude}/${longitude}`);\n};\n\n//검색어 추가\nexport const addSearchKeyword = async (userId, keyword) => {\n  const data = {\n    userId: userId,\n    search: keyword\n  };\n  return createRequest(\"post\", `/members/search/${userId}/${keyword}`, data);\n};\n\n//최근 검색어 조회\nexport const getRecentSearchKeywords = async userId => {\n  return createRequest(\"get\", `/members/search/${userId}`);\n};\n\n//검색어 삭제\nexport const deleteKeyword = async (userId, searchId) => {\n  return createRequest(\"delete\", `/members/search/${userId}/${searchId}`);\n};\n\n//도착지 후기 추가\nexport const writeDestinationReview = async (userId, review,\n// destinationId,\ndestinaionLatitude, destinaionLongitude, destinationTitle) => {\n  const data = {\n    userId,\n    review,\n    destinaionLatitude,\n    destinaionLongitude,\n    destinationTitle\n  };\n  return createRequest(\"post\", `/members/walks/search/complete`, data);\n};\n\n//도착지 후기 리스트 조회\nexport const getReviews = async userId => {\n  return createRequest(\"get\", `/members/walks/search/complete/${userId}`);\n};\n\n//회원 탈퇴\nexport const deleteAccount = async userId => {\n  return createRequest(\"delete\", `/members/${userId}`);\n};\n\n//검색 결과로 가는 길\nexport const fetchNavigationData = async (startLatitude, startLongitude, endLatitude, endLongitude) => {\n  return createRequest(\"get\", `/walks/search/${startLatitude}/${startLongitude}/${endLatitude}/${endLongitude}`\n  // `/walks/search/${37.545}/${127.0684}/${endLatitude}/${endLongitude}`\n  );\n};\n\n//인기 산책로 이동 경로 및 산책로 조회\nexport const navigatePopularPath = async (trailId, userId, latitude, longitude) => {\n  // const response = await axios.get(\n  //   `${BASE_URL}/walks/popular/route/${trailId}/${userId}/${latitude}/${longitude}`,\n  //   {\n  //     headers: {\n  //       Authorization: `KakaoAK ${APP_KEY}`,\n  //     },\n  //   }\n  // );\n  // console.log(response);\n  // return response.data;\n\n  return createRequest(\"get\", `/walks/popular/route/${trailId}/${userId}/${latitude}/${longitude}`\n  // `/walks/popular/route/${trailId}/${userId}/${37.545}/${127.0684}`\n  );\n};\n\n//서울 어딘가 위치\n// 37.545;\n// 127.0684;","map":{"version":3,"names":["createRequest","axios","BASE_URL","APP_KEY","process","env","REACT_APP_APP_KEY","fetchUserData","userId","fetchFinishedPaths","fetchLikedPaths","fetchNearbyPaths","lat","lng","keywordSearch","keyword","response","get","params","query","headers","Authorization","data","documents","error","console","log","coord2address","startY","startX","x","y","address","address_name","fetchPopularPaths","shuffleArray","array","i","length","j","Math","floor","random","fetchAttractions","shuffledData","randomFive","slice","fetchPathDetail","trailId","logoutRequest","navigateToPopular","latitude","longitude","addSearchKeyword","search","getRecentSearchKeywords","deleteKeyword","searchId","writeDestinationReview","review","destinaionLatitude","destinaionLongitude","destinationTitle","getReviews","deleteAccount","fetchNavigationData","startLatitude","startLongitude","endLatitude","endLongitude","navigatePopularPath"],"sources":["/Users/wooyoung/Desktop/CODING/cote_python/yugwa-frontend/src/APIs/api.js"],"sourcesContent":["// api.js\nimport { createRequest } from \"../utils/api-utils\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"./APIconfig\";\n\n// const BASE_URL = \"http://ddubam.site:8080/api\";\n\nconst APP_KEY = process.env.REACT_APP_APP_KEY;\n\n//카카오 계정정보에서 id추출해 뚜밤뚜밤 계정정보 요청\nexport const fetchUserData = async (userId) => {\n  return createRequest(\"get\", `/members/${userId}`);\n};\n\n//완료한 산책 리스트 조회\nexport const fetchFinishedPaths = async (userId) => {\n  return createRequest(\"get\", `/members/walks/complete/${userId}`);\n};\n\n//찜한 산책로 리스트 조회\nexport const fetchLikedPaths = async (userId) => {\n  return createRequest(\"get\", `/members/walks/select/${userId}`);\n};\n\n//주변 산책로 리스트 조회\nexport const fetchNearbyPaths = async (lat, lng) => {\n  return createRequest(\"get\", `/walks/near/${lat}/${lng}`);\n};\n\n//키워드로 장소 검색 -> 목적지 위도, 경도 얻음\nexport const keywordSearch = async (keyword) => {\n  try {\n    const response = await axios.get(\n      `https://dapi.kakao.com/v2/local/search/keyword.json`,\n      {\n        params: {\n          query: keyword,\n        },\n        headers: {\n          Authorization: `KakaoAK ${APP_KEY}`,\n        },\n      }\n    );\n    return response.data.documents;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//좌표로 주소 변환하기\nexport const coord2address = async (startY, startX) => {\n  try {\n    const response = await axios.get(\n      `https://dapi.kakao.com/v2/local/geo/coord2address.json`,\n      {\n        params: {\n          x: startX,\n          y: startY,\n        },\n        headers: {\n          Authorization: `KakaoAK ${APP_KEY}`,\n        },\n      }\n    );\n    // console.log(response.data.documents[0].address.address_name);\n    return response.data.documents[0].address.address_name;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//인기 산책로 리스트 조회\nexport const fetchPopularPaths = async () => {\n  return createRequest(\"get\", `/walks/popular`);\n};\n\nconst shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\n//관광지 리스트 조회\nexport const fetchAttractions = async () => {\n  try {\n    const response = await createRequest(\"get\", `/attractions`);\n    const shuffledData = shuffleArray(response);\n    const randomFive = shuffledData.slice(0, 5);\n    return randomFive;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n//산책로 상세정보 조회\nexport const fetchPathDetail = async (trailId, userId) => {\n  return createRequest(\"get\", `/walks/${trailId}/${userId}`);\n};\n\nexport const logoutRequest = async () => {\n  return createRequest(\"get\", `/members/kakao/logout`);\n};\n\n//인기 산책로로 가는 길 + 디테일\nexport const navigateToPopular = async (\n  trailId,\n  userId,\n  latitude,\n  longitude\n) => {\n  return createRequest(\n    \"get\",\n    `/walks/popular/route/${trailId}/${userId}/${latitude}/${longitude}`\n  );\n};\n\n//검색어 추가\nexport const addSearchKeyword = async (userId, keyword) => {\n  const data = {\n    userId: userId,\n    search: keyword,\n  };\n\n  return createRequest(\"post\", `/members/search/${userId}/${keyword}`, data);\n};\n\n//최근 검색어 조회\nexport const getRecentSearchKeywords = async (userId) => {\n  return createRequest(\"get\", `/members/search/${userId}`);\n};\n\n//검색어 삭제\nexport const deleteKeyword = async (userId, searchId) => {\n  return createRequest(\"delete\", `/members/search/${userId}/${searchId}`);\n};\n\n//도착지 후기 추가\nexport const writeDestinationReview = async (\n  userId,\n  review,\n  // destinationId,\n  destinaionLatitude,\n  destinaionLongitude,\n  destinationTitle\n) => {\n  const data = {\n    userId,\n    review,\n    destinaionLatitude,\n    destinaionLongitude,\n    destinationTitle,\n  };\n  return createRequest(\"post\", `/members/walks/search/complete`, data);\n};\n\n//도착지 후기 리스트 조회\nexport const getReviews = async (userId) => {\n  return createRequest(\"get\", `/members/walks/search/complete/${userId}`);\n};\n\n//회원 탈퇴\nexport const deleteAccount = async (userId) => {\n  return createRequest(\"delete\", `/members/${userId}`);\n};\n\n//검색 결과로 가는 길\nexport const fetchNavigationData = async (\n  startLatitude,\n  startLongitude,\n  endLatitude,\n  endLongitude\n) => {\n  return createRequest(\n    \"get\",\n    `/walks/search/${startLatitude}/${startLongitude}/${endLatitude}/${endLongitude}`\n    // `/walks/search/${37.545}/${127.0684}/${endLatitude}/${endLongitude}`\n  );\n};\n\n//인기 산책로 이동 경로 및 산책로 조회\nexport const navigatePopularPath = async (\n  trailId,\n  userId,\n  latitude,\n  longitude\n) => {\n  // const response = await axios.get(\n  //   `${BASE_URL}/walks/popular/route/${trailId}/${userId}/${latitude}/${longitude}`,\n  //   {\n  //     headers: {\n  //       Authorization: `KakaoAK ${APP_KEY}`,\n  //     },\n  //   }\n  // );\n  // console.log(response);\n  // return response.data;\n\n  return createRequest(\n    \"get\",\n    `/walks/popular/route/${trailId}/${userId}/${latitude}/${longitude}`\n    // `/walks/popular/route/${trailId}/${userId}/${37.545}/${127.0684}`\n  );\n};\n\n//서울 어딘가 위치\n// 37.545;\n// 127.0684;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}