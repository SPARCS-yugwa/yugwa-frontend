{"ast":null,"code":"// import { createRequest } from \"../utils/api-utils\";\nimport axios from \"axios\";\nconst BASE_URL = \"https://sodamsodam.site/api\";\nconst token = localStorage.getItem(\"token\");\n// const BASE_URL = \"http://ddubam.site:8080/api\";\n\nconst APP_KEY = process.env.REACT_APP_APP_KEY;\nexport const getReply = async (memberId, chat) => {\n  const data = {\n    memberId,\n    chat\n  };\n  try {\n    const response = await axios.post(`${BASE_URL}/chatbots`, data, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    console.log(response);\n    return response === null || response === void 0 ? void 0 : response.data;\n  } catch (error) {\n    console.log(\"챗봇 답변 오류 : \", error);\n    return {\n      text: \"챗봇 서비스에 문제가 발생했습니다. 나중에 다시 시도해주세요.\"\n    };\n  }\n};\nexport const enterChat = async (memberId, chat) => {\n  const data = {\n    memberId,\n    chat\n  };\n  try {\n    const response = await axios.post(`${BASE_URL}/chatbots/sessions`, data, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    console.log(\"입장 성공\");\n  } catch (error) {\n    console.log(\"챗봇 입장 에러 : \", error);\n  }\n};\nexport const TTS = async text => {\n  const data = {\n    text\n  };\n  try {\n    const response = await axios.post(`${BASE_URL}/chatbots/speach`, data, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  } catch (error) {\n    console.log(\"tts 에러 : \", error);\n  }\n};\n_c = TTS;\nexport async function fetchAndPlaySpeech(text) {\n  try {\n    const response = await fetch(`${BASE_URL}/chatbots/speach`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        text: text\n      })\n    });\n    if (response.ok) {\n      const blob = await response.blob();\n      const url = URL.createObjectURL(blob);\n      const audio = new Audio(url);\n      audio.play();\n    } else {\n      console.error(\"Failed to fetch speech:\", response.statusText);\n    }\n  } catch (error) {\n    console.error(\"Error fetching speech:\", error);\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"TTS\");","map":{"version":3,"names":["axios","BASE_URL","token","localStorage","getItem","APP_KEY","process","env","REACT_APP_APP_KEY","getReply","memberId","chat","data","response","post","headers","Authorization","console","log","error","text","enterChat","TTS","_c","fetchAndPlaySpeech","fetch","method","body","JSON","stringify","ok","blob","url","URL","createObjectURL","audio","Audio","play","statusText","$RefreshReg$"],"sources":["/Users/wooyoung/Desktop/CODING/cote_python/yugwa-frontend/src/APIs/chatbotAPI.js"],"sourcesContent":["// import { createRequest } from \"../utils/api-utils\";\nimport axios from \"axios\";\n\nconst BASE_URL = \"https://sodamsodam.site/api\";\nconst token = localStorage.getItem(\"token\");\n// const BASE_URL = \"http://ddubam.site:8080/api\";\n\nconst APP_KEY = process.env.REACT_APP_APP_KEY;\n\nexport const getReply = async (memberId, chat) => {\n  const data = { memberId, chat };\n  try {\n    const response = await axios.post(`${BASE_URL}/chatbots`, data, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    console.log(response);\n    return response?.data;\n  } catch (error) {\n    console.log(\"챗봇 답변 오류 : \", error);\n    return {\n      text: \"챗봇 서비스에 문제가 발생했습니다. 나중에 다시 시도해주세요.\",\n    };\n  }\n};\n\nexport const enterChat = async (memberId, chat) => {\n  const data = { memberId, chat };\n  try {\n    const response = await axios.post(`${BASE_URL}/chatbots/sessions`, data, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    console.log(\"입장 성공\");\n  } catch (error) {\n    console.log(\"챗봇 입장 에러 : \", error);\n  }\n};\n\nexport const TTS = async (text) => {\n  const data = { text };\n  try {\n    const response = await axios.post(`${BASE_URL}/chatbots/speach`, data, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      },\n    });\n  } catch (error) {\n    console.log(\"tts 에러 : \", error);\n  }\n};\n\nexport async function fetchAndPlaySpeech(text) {\n  try {\n    const response = await fetch(`${BASE_URL}/chatbots/speach`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify({ text: text }),\n    });\n\n    if (response.ok) {\n      const blob = await response.blob();\n      const url = URL.createObjectURL(blob);\n      const audio = new Audio(url);\n      audio.play();\n    } else {\n      console.error(\"Failed to fetch speech:\", response.statusText);\n    }\n  } catch (error) {\n    console.error(\"Error fetching speech:\", error);\n  }\n}\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,6BAA6B;AAC9C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AAC3C;;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE7C,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,IAAI,KAAK;EAChD,MAAMC,IAAI,GAAG;IAAEF,QAAQ;IAAEC;EAAK,CAAC;EAC/B,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAI,CAAC,GAAGb,QAAQ,WAAW,EAAEW,IAAI,EAAE;MAC9DG,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUd,KAAK,EAAE;QAChC,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACFe,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;IACrB,OAAOA,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAED,IAAI;EACvB,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdF,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEC,KAAK,CAAC;IACjC,OAAO;MACLC,IAAI,EAAE;IACR,CAAC;EACH;AACF,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOX,QAAQ,EAAEC,IAAI,KAAK;EACjD,MAAMC,IAAI,GAAG;IAAEF,QAAQ;IAAEC;EAAK,CAAC;EAC/B,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAI,CAAC,GAAGb,QAAQ,oBAAoB,EAAEW,IAAI,EAAE;MACvEG,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUd,KAAK,EAAE;QAChC,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACFe,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdF,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEC,KAAK,CAAC;EACnC;AACF,CAAC;AAED,OAAO,MAAMG,GAAG,GAAG,MAAOF,IAAI,IAAK;EACjC,MAAMR,IAAI,GAAG;IAAEQ;EAAK,CAAC;EACrB,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAI,CAAC,GAAGb,QAAQ,kBAAkB,EAAEW,IAAI,EAAE;MACrEG,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUd,KAAK,EAAE;QAChC,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACdF,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEC,KAAK,CAAC;EACjC;AACF,CAAC;AAACI,EAAA,GAZWD,GAAG;AAchB,OAAO,eAAeE,kBAAkBA,CAACJ,IAAI,EAAE;EAC7C,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMY,KAAK,CAAC,GAAGxB,QAAQ,kBAAkB,EAAE;MAC1DyB,MAAM,EAAE,MAAM;MACdX,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUd,KAAK;MAChC,CAAC;MACDyB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,IAAI,EAAEA;MAAK,CAAC;IACrC,CAAC,CAAC;IAEF,IAAIP,QAAQ,CAACiB,EAAE,EAAE;MACf,MAAMC,IAAI,GAAG,MAAMlB,QAAQ,CAACkB,IAAI,CAAC,CAAC;MAClC,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;MACrC,MAAMI,KAAK,GAAG,IAAIC,KAAK,CAACJ,GAAG,CAAC;MAC5BG,KAAK,CAACE,IAAI,CAAC,CAAC;IACd,CAAC,MAAM;MACLpB,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEN,QAAQ,CAACyB,UAAU,CAAC;IAC/D;EACF,CAAC,CAAC,OAAOnB,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;EAChD;AACF;AAAC,IAAAI,EAAA;AAAAgB,YAAA,CAAAhB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}